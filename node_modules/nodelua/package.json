{
  "name": "nodelua",
  "version": "0.3.3",
  "description": "Lua Bindings For Node.JS",
  "keywords": [
    "lua"
  ],
  "main": "lib/index.js",
  "scripts": {
    "test": "",
    "install": "node-gyp rebuild"
  },
  "homepage": "http://github.com/brettlangdon/nodelua.git",
  "repository": {
    "type": "git",
    "url": "git://github.com/brettlangdon/nodelua.git"
  },
  "author": {
    "name": "Brett Langdon",
    "email": "brett@blangdon.com",
    "url": "http://www.brett.is"
  },
  "contributors": [
    {
      "name": "York Gu",
      "email": "gyq5319920@gmail.com",
      "url": "http://blog.yorkgu.me"
    }
  ],
  "license": "MIT",
  "gypfile": true,
  "engines": {
    "node": ">=0.10.0"
  },
  "engineStrict": true,
  "readme": "NodeLua\n======\n\nNodeLua is a module to expose Lua bindings to Node.JS.\n\nThis is still a work in progress, collaborators welcome.\n\n## Install\n\nRequires Lua 5.1, will *not* work with 5.2\n\nLua and it's C libraries are required for this module to work.\n\n```bash\nnpm install nodelua\n```\n\n```javascript\nvar nodelua = require('nodelua');\n```\n\n### Environment Variables\nThese two environment variables should really only be used when there are installation problems\n\n* `NODELUA_INCLUDE` - additional directory to search for lua.h in. example: `NODELUA_INCLUDE=/opt/lua`\n* `NODELUA_FLAGS` - additional library flags to use. example: `NODELUA_FLAGS=-llua5.1`\n\n## Installation Problems\nTo try and narrow down where the error is coming from try running the following commands:\n```bash\n$ find /usr/include /usr/local/include -name lua.h | sed s/lua.h//\n/usr/include/lua5.1/\n$ pkg-config --libs-only-l --silence-errors lua || pkg-config --libs-only-l --silence-errors lua5.1\n-llua5.1\n```\n\nIf instead they show nothing or an error then there are a few possible explanations:\n\n* Lua Libraries are not installed\n * This can be remedied with something like `[sudo] apt-get install liblua5.1-dev`\n* Lua Libraries are not in an expected location `/usr/include/` or `/usr/local/include`\n * This can be solved by setting install time environment variables `NODELUA_INCLUDE` and `NODELUA_FLAGS`\n * `NODELUA_INCLUDE=\"/path/where/lua.h/is/\" NODELUA_FLAGS=\"-llua5.1\" npm install nodelua`\n\n\n## API\n### NodeLua\nThe `NodeLua` module itself contains the object `LuaState` as well as some constants.\n```javascript\nvar lua = new nodelua.LuaState('lua')\n```\n\n#### -- STATUS\n`STATUS` is an object that contains the constants for values returned by `LuaState.status()` or `LuaState.statusSync()`.\n\n`nodelua.STATUS` conatins the following constants:\n * `YIELD: 1`\n * `ERRRUN: 2`\n * `ERRSYNTAX: 3`\n * `ERRMEM: 4`\n * `ERRERR: 5`\n\n#### -- GC\n`GC` is an object of constants used for controlling the lua garbage collector.\n\n`nodelua.GC` conatins the following constants:\n * `STOP: 0`\n * `RESTART: 1`\n * `COLLECT: 2`\n * `COUNT: 3`\n * `COUNTB: 4`\n * `STEP: 5`\n * `SETPAUSE: 6`\n * `SETSTEPMUL: 7`\n\n#### -- INFO\n`INFO` is an object containing constants with information about the version of lua you are using.\n\n`nodelua.INFO` contains the following constants:\n * `VERSION`\n * `VERSION_NUM`\n * `COPYRIGHT`\n * `AUTHORS`\n\n### LuaState\nThe `LuaState` is an object wrapper around a `lua_State` instance.\n\n#### -- new LuaState(name)\nWhen creating a new `LuaState` you must provide it with a name, this is to help stop conflicts between registering functions.\nYou should provide unique names to each `LuaState` instance.\n\n#### -- getName()\nReturns the name provided when creating creating the `LuaState`\n\n#### -- doFile(file_name, callback)\nThe `doFile` method is used to load and execute lua code stored in `file_name`.\n```javascript\nlua.doFile('test.lua', function(error, ret_value){\n    if(!error && ret_value){\n      console.dir(ret_value);\n    } else{\n      console.error(error);\n    }\n  });\n```\n\n#### -- doFileSync(file_name)\nThis is the synchronous version of `doFile`, any value returned from the script is returned.\n```javascript\nvar ret_value = lua.doFileSync('test.lua');\nconsole.dir(ret_value);\n```\n\n#### -- doString(lua_code, callback)\nThe `doString` method is the same as `doFile` except the code is loaded from `lua_code` rather than from a file.\n```javascript\nlua.doString(\"print('Hello, Lua')\", function(error, ret_value){\n    if(!error && ret_value){\n      console.dir(ret_value);\n    } else{\n      console.error(error);\n    }\n  });\n```\n\n####  -- doStringSync(lua_code)\nThis is the synchronous version of `doString`, any value returned from the script is returned.\n```javascript\nvar ret_value = lua.doString(\"return 5\");\nconsole.dir(ret_value);\n```\n\n#### -- setGlobal(name, value)\nThe `setGlobal` method is used to provide lua with the global variable `name` containing the value `value`.\n```javascript\nlua.setGlobal('test', 'value');\n```\n\n#### -- getGlobal(name)\nThe `getGlobal` method is used to retrieve either a value set by `setGlobal` or a global variable in any lua code that has been run.\n```javascript\nconsole.log(lua.getGlobal('test'));\n```\n\n#### -- registerFunction(name, func)\n`registerFunction` is used to expose a javascript function to lua.\n```javascript\nlua.registerFunction('add_them', function(a, b){\n  return a + b;\n});\nvar ret_value = lua.doStringSync('return add_them(2, 4)');\nconsole.dir(ret_value);\n```\n\n#### -- status(callback)\n`status` will return the current status code for lua. The result can be `0` for normal or one of the error codes in `nodelua.STATUS`.\n```javascript\nlua.status(function(code){\n    if(code == nodelua.STATUS.ERRSYNTAX){\n      console.error('Lua Syntax Error');\n    }\n  });\n```\n\n#### -- statusSync()\nThis is the synchronous version of `status`\n```javascript\nvar code = lua.statusSync();\nconsole.dir(code);\n```\n\n#### -- collectGarbage(GC_CODE, callback)\n`collectGarbage` is used to control the lua garbage collector. `GC_CODE` should be one of the codes taken from `nodelua.GC`.\n```javascript\nlua.collectGarbage(nodelua.GC.COLLECT, function(code){\n    console.dir(code);\n  });\n```\n\n#### -- collectGarbageSync(GC_CODE)\nThis is the synchronous version of `collectGarbage`.\n```javascript\nvar code = lua.collectGarbageSync(nodelua.GC.COLLECT);\nconsole.dir(code);\n```\n\n#### -- push(value)\nPush `value` onto the Lua stack.\n```javascript\nlua.push(5);\n```\n\n#### -- pop(num)\nPop `num` items from the stack. Default is 1.\n```javascript\nlua.pop(5);\n```\n\n#### -- getTop()\nReturn the number of elements on the Lua stack.\n```javascript\nvar num = lua.getTop();\n```\n\n#### -- setTop(index)\nSet the top of the Lua stack to `index`.\n```javascript\nlua.setTop(3);\n```\n\n#### -- replace(index)\nReplaces the top stack element into the specified `index`\n```javascript\nlua.replace(3);\n```\n\n#### -- close()\n`close` should be used whenever you have finished using a `LuaState`. This will simply call `lua_close` on the `lua_State` for that object.\n\n## Example\nSee `./examples/`.\n```javascript\nvar nodelua = require('nodelua');\nvar lua = new nodelua.LuaState('example');\n\nlua.registerFunction('add_them', function(a, b){\n  return a + b;\n});\n\nlua.doFile('some_file.lua', function(error, ret_value){\n    console.dir(lua.getGlobal('some_var'));\n  });\n```\n\n## License\nThe MIT License (MIT)\nCopyright (c) 2012 Brett Langdon <brett@blangdon.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/brettlangdon/nodelua/issues"
  },
  "_id": "nodelua@0.3.3",
  "_from": "nodelua@"
}
